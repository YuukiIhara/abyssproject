//********************************************************************************************************************
// タイトル:		描画処理
// プログラム名:	renderer.h
//********************************************************************************************************************
#ifndef _RENDERER_H_
#define _RENDERER_H_

//********************************************************************************************************************
// インクルードファイル
//********************************************************************************************************************
#include "main.h"

//********************************************************************************************************************
// マクロ定義
//********************************************************************************************************************
// 頂点フォーマット( 頂点座標[2D] / 頂点カラー / テクスチャ座標 )
#define	FVF_VERTEX_2D	(D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_TEX1)
// 頂点フォーマット( 頂点座標[3D] / 頂点法線 / 頂点カラー / テクスチャ座標 )
#define FVF_VERTEX_3D	(D3DFVF_XYZ | D3DFVF_NORMAL | D3DFVF_DIFFUSE | D3DFVF_TEX1)

//********************************************************************************************************************
// 構造体定義
//********************************************************************************************************************
// 上記頂点フォーマットに合わせた構造体を定義
typedef struct
{
	D3DXVECTOR3 pos;	// 頂点座標
	float rhw;			// 座標変換用係数(1.0fで固定)
	D3DCOLOR col;		// 頂点カラー
	D3DXVECTOR2 uv;		// テクスチャ座標
} VERTEX_2D;

// 上記３Ｄポリゴン頂点フォーマットに合わせた構造体を定義
typedef struct
{
	D3DXVECTOR3 pos;	// 頂点座標
	D3DXVECTOR3 nor;	// 法線ベクトル
	D3DCOLOR	col;	// 反射光
	D3DXVECTOR2 uv;		// テクスチャ座標
} VERTEX_3D;


//********************************************************************************************************************
// クラス
//********************************************************************************************************************
// レンダラークラス
class CRenderer
{
public:
	CRenderer();								// コンストラクタ
	~CRenderer();								// デストラクタ
	HRESULT Init(HWND hWnd, bool bWindow);
	void Uninit(void);
	void Update(void);
	void Draw(void);
	void DrawFPS(void);
	LPDIRECT3DDEVICE9 GetDevice(void);
private:
	LPDIRECT3D9				m_pD3D;			// Direct3Dオブジェクト
	LPDIRECT3DDEVICE9		m_pD3DDevice;	// Deviceオブジェクト(描画に必要)
	LPD3DXFONT				m_pFont;		// フォントへのポインタ
};

#endif
