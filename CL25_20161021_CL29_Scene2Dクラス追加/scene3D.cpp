//********************************************************************************************************************
// タイトル:		シーン処理
// プログラム名:	scene3D.cpp
//********************************************************************************************************************
//********************************************************************************************************************
// インクルードファイル
//********************************************************************************************************************
#include "main.h"
#include "renderer.h"
#include "scene.h"
#include "scene3D.h"

//********************************************************************************************************************
// マクロ定義
//********************************************************************************************************************

//********************************************************************************************************************
// 構造体定義
//********************************************************************************************************************

//********************************************************************************************************************
// インライン関数
//********************************************************************************************************************

//********************************************************************************************************************
// 静的メンバ変数の宣言
//********************************************************************************************************************

//**********************************************************************************************************************************************
// 
// CScene3Dクラスの実体
//
//**********************************************************************************************************************************************
//********************************************************************************************************************
// funcinfo：コンストラクタ
//********************************************************************************************************************
CScene3D::CScene3D()
{
	m_pTexture = NULL;	
	m_pVtxBuff = NULL;
	D3DXMatrixIdentity(&m_mtxWorld);
	m_pos = D3DXVECTOR3( 0.0f, 0.0f, 0.0f );
	m_rot = D3DXVECTOR3( 0.0f, 0.0f, 0.0f );		
	m_scl = D3DXVECTOR3( 1.0f, 1.0f, 1.0f );		
}
//********************************************************************************************************************
// funcinfo：デストラクタ
//********************************************************************************************************************
CScene3D::~CScene3D()
{

}
//********************************************************************************************************************
// funcinfo：初期化処理
//********************************************************************************************************************
HRESULT CScene3D::Init(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = GetRenderer() -> GetDevice();
	
	// メンバ変数を初期化
	m_pos = D3DXVECTOR3( 0.0f, 0.0f, 0.0f );
	m_rot = D3DXVECTOR3( 0.0f, 0.0f, 0.0f );		
	m_scl = D3DXVECTOR3( 1.0f, 1.0f, 1.0f );

	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice, "data/TEXTURE/player000.png ", &m_pTexture);

	// 頂点バッファの生成
	// オブジェクトの頂点バッファを作成
	if(FAILED(pDevice -> CreateVertexBuffer(sizeof(VERTEX_3D) * 4,
											D3DUSAGE_WRITEONLY,
											FVF_VERTEX_3D,
											D3DPOOL_MANAGED,
											&m_pVtxBuff,
											NULL)))
	{
		return E_FAIL;
	}

	// 頂点情報を設定
	{//頂点バッファの中身を埋める
		VERTEX_3D *pVtx;

		// 頂点データの範囲をロックし、頂点バッファへのポインタを取得
		m_pVtxBuff->Lock(0,0,(void**)&pVtx,0);

		// 頂点座標の設定
		pVtx[0].pos = D3DXVECTOR3(m_pos.x - 200.0f / 2, m_pos.y + 200.0f / 2, 0.0f);
		pVtx[1].pos = D3DXVECTOR3(m_pos.x + 200.0f / 2, m_pos.y + 200.0f / 2, 0.0f);
		pVtx[2].pos = D3DXVECTOR3(m_pos.x - 200.0f / 2, m_pos.y - 200.0f / 2, 0.0f);
		pVtx[3].pos = D3DXVECTOR3(m_pos.x + 200.0f / 2, m_pos.y - 200.0f / 2, 0.0f);
		// rhwの設定
		pVtx[0].nor = D3DXVECTOR3(0.0f, 0.0f, -1.0f);
		pVtx[1].nor = D3DXVECTOR3(0.0f, 0.0f, -1.0f);
		pVtx[2].nor = D3DXVECTOR3(0.0f, 0.0f, -1.0f);
		pVtx[3].nor = D3DXVECTOR3(0.0f, 0.0f, -1.0f);
		//頂点カラーの設定
		pVtx[0].col = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
		pVtx[1].col = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
		pVtx[2].col = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
		pVtx[3].col = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
		// テクスチャ座標指定
		pVtx[0].uv = D3DXVECTOR2( 0.0f, 0.0f );
		pVtx[1].uv = D3DXVECTOR2( 1.0f, 0.0f );
		pVtx[2].uv = D3DXVECTOR2( 0.0f, 1.0f );
		pVtx[3].uv = D3DXVECTOR2( 1.0f, 1.0f );
		
		// 頂点データをアンロックする
		m_pVtxBuff->Unlock();
	}

	return S_OK;
}
//********************************************************************************************************************
// funcinfo：終了処理
//********************************************************************************************************************
void CScene3D::Uninit(void)
{
	// 頂点バッファの破棄
	if(m_pVtxBuff != NULL)
	{	//バッファーの解放
		m_pVtxBuff -> Release();
		m_pVtxBuff = NULL;
	}

	// テクスチャの破棄
	if(m_pTexture != NULL)
	{	//バッファーの解放
		m_pTexture -> Release();
		m_pTexture = NULL;
	}
}
//********************************************************************************************************************
// funcinfo：更新処理
//********************************************************************************************************************
void CScene3D::Update(void)
{

}
//********************************************************************************************************************
// funcinfo：描画処理
//********************************************************************************************************************
void CScene3D::Draw(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = GetRenderer() -> GetDevice();
	D3DXMATRIX mtxScl, mtxRot, mtxTranslate;
	
	// ワールドマトリックスの初期化
	D3DXMatrixIdentity(&m_mtxWorld);

	// スケールを反映
	D3DXMatrixScaling( &mtxScl, m_scl.x, m_scl.y, m_scl.z );
	D3DXMatrixMultiply( &m_mtxWorld, &m_mtxWorld, &mtxScl );

	// 回転を反映
	D3DXMatrixRotationYawPitchRoll( &mtxRot, m_rot.y, m_rot.x, m_rot.z);
	D3DXMatrixMultiply( &m_mtxWorld, &m_mtxWorld, &mtxRot );

	// 移動を反映
	D3DXMatrixTranslation( &mtxTranslate, m_pos.x, m_pos.y, m_pos.z );
	D3DXMatrixMultiply( &m_mtxWorld, &m_mtxWorld, &mtxTranslate );

	// ワールドマトリックスの設定
	pDevice->SetTransform(D3DTS_WORLD,&m_mtxWorld);
	
	// 頂点バッファをデータストリームに設定
	pDevice -> SetStreamSource( 0, m_pVtxBuff, 0, sizeof(VERTEX_3D) );

	// 頂点フォーマットの設定
	pDevice -> SetFVF( FVF_VERTEX_3D );

	// テクスチャの設定
	pDevice -> SetTexture( 0, m_pTexture );

	// ポリゴンの描画
	pDevice -> DrawPrimitive( D3DPT_TRIANGLESTRIP, 0, 2 );
}
