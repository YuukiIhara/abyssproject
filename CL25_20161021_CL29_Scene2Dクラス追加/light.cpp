//********************************************************************************************************************
// タイトル:		ライト処理
// プログラム名:	light.cpp
//********************************************************************************************************************
//********************************************************************************************************************
// インクルードファイル
//********************************************************************************************************************
#include "main.h"
#include "renderer.h"
#include "light.h"

//********************************************************************************************************************
// マクロ定義
//********************************************************************************************************************

//********************************************************************************************************************
// インライン関数
//********************************************************************************************************************

//********************************************************************************************************************
// 静的メンバ変数の宣言
//********************************************************************************************************************

//**********************************************************************************************************************************************
// 
// CLightクラスの実体
//
//**********************************************************************************************************************************************
//********************************************************************************************************************
// funcinfo：コンストラクタ
//********************************************************************************************************************
CLight::CLight()
{
	for(int nCntLight = 0; nCntLight < NUM_LIGHT; nCntLight++)
	{
		// D3DLIGHT9構造体を0でクリアする
		ZeroMemory(&m_aLight[nCntLight], sizeof(D3DLIGHT9));
	}
}
//********************************************************************************************************************
// funcinfo：デストラクタ
//********************************************************************************************************************
CLight::~CLight()
{

}
//********************************************************************************************************************
// funcinfo：初期化処理
//********************************************************************************************************************
HRESULT CLight::Init(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = GetRenderer() -> GetDevice();

	D3DXVECTOR3 vecDir;

	for(int nCntLight = 0; nCntLight < NUM_LIGHT; nCntLight++)
	{
		// D3DLIGHT9構造体を0でクリアする
		ZeroMemory(&m_aLight[nCntLight], sizeof(D3DLIGHT9));
		// ライトのタイプの設定
		m_aLight[nCntLight].Type = D3DLIGHT_DIRECTIONAL;
		switch(nCntLight)
		{
		case 0:
			// ライト0の拡散光の設定
			m_aLight[nCntLight].Diffuse = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
			// ライト0の方向の設定
			vecDir = D3DXVECTOR3(0.0f, 0.0f, 1.0f);
			break;
		case 1:
			m_aLight[nCntLight].Diffuse = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
			vecDir = D3DXVECTOR3(0.0f, 0.0f, -1.00f);
			break;
		case 2:
			m_aLight[nCntLight].Diffuse = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
			vecDir = D3DXVECTOR3(1.0f, 0.0f, 0.0f);
			break;
		case 3:
			m_aLight[nCntLight].Diffuse = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
			vecDir = D3DXVECTOR3(-1.0f, 0.0f, 0.0f);
			break;
		case 4:
			m_aLight[nCntLight].Diffuse = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
			vecDir = D3DXVECTOR3(0.0f, -1.0f, 0.0f);
			break;
		case 5:
			m_aLight[nCntLight].Diffuse = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
			vecDir = D3DXVECTOR3(0.0f, 1.0f, 0.0f);
			break;
		default:
			m_aLight[nCntLight].Diffuse = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
			vecDir = D3DXVECTOR3(0.0f, 1.0f, 0.0f);
			break;
		}
		D3DXVec3Normalize((D3DXVECTOR3 *) &m_aLight[nCntLight].Direction, &vecDir);
		// ライトのAmbientの設定
		m_aLight[nCntLight].Ambient = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
		// ライト0をレンダリングパイプラインに設定
		pDevice -> SetLight(nCntLight, &m_aLight[nCntLight]);
		// ライト0を使用使用状態に
		pDevice -> LightEnable(nCntLight, TRUE);
	}
	// ライティングモードをON
	pDevice -> SetRenderState(D3DRS_LIGHTING, TRUE);

	return S_OK;
}
//********************************************************************************************************************
// funcinfo：終了処理
//********************************************************************************************************************
void CLight::Uninit(void)
{
	
}
//********************************************************************************************************************
// funcinfo：更新処理
//********************************************************************************************************************
void CLight::Update(void)
{

}

