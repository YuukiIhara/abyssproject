//********************************************************************************************************************
// タイトル:		シーン処理
// プログラム名:	scene2D.cpp
//********************************************************************************************************************
//********************************************************************************************************************
// インクルードファイル
//********************************************************************************************************************
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "scene.h"
#include "scene2D.h"

//********************************************************************************************************************
// マクロ定義
//********************************************************************************************************************

//********************************************************************************************************************
// 構造体定義
//********************************************************************************************************************

//********************************************************************************************************************
// インライン関数
//********************************************************************************************************************

//********************************************************************************************************************
// 静的メンバ変数の宣言
//********************************************************************************************************************

//**********************************************************************************************************************************************
// 
// CScene2Dクラスの実体
//
//**********************************************************************************************************************************************
//********************************************************************************************************************
// funcinfo：コンストラクタ
//********************************************************************************************************************
CScene2D::CScene2D()
{
	m_pTexture = NULL;	
	m_pVtxBuff = NULL;	
	m_bLoadTexture = false;
	m_pos = D3DXVECTOR3( 0.0f, 0.0f, 0.0f );
	m_uv[0] = D3DXVECTOR2( 0.0f, 0.0f );
	m_uv[1] = D3DXVECTOR2( 1.0f, 0.0f );
	m_uv[2] = D3DXVECTOR2( 0.0f, 1.0f );
	m_uv[3] = D3DXVECTOR2( 1.0f, 1.0f );
}
//********************************************************************************************************************
// funcinfo：デストラクタ
//********************************************************************************************************************
CScene2D::~CScene2D()
{

}
//********************************************************************************************************************
// funcinfo：初期化処理
//********************************************************************************************************************
HRESULT CScene2D::Init(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer() -> GetDevice();
	
	// ポリゴンの位置を設定
	m_pos = D3DXVECTOR3( SCREEN_WIDTH / 2.0f, SCREEN_HEIGHT / 2.0f, 0.0f );

	// テクスチャの生成
	D3DXCreateTextureFromFile(pDevice, "data/TEXTURE/player000.png ", &m_pTexture);

	// 頂点バッファの生成
	// オブジェクトの頂点バッファを作成
	if(FAILED(pDevice -> CreateVertexBuffer(sizeof(VERTEX_2D) * 4,
											D3DUSAGE_WRITEONLY,
											FVF_VERTEX_2D,
											D3DPOOL_MANAGED,
											&m_pVtxBuff,
											NULL)))
	{
		return E_FAIL;
	}

	// 頂点情報を設定
	{//頂点バッファの中身を埋める
		VERTEX_2D *pVtx;

		// 頂点データの範囲をロックし、頂点バッファへのポインタを取得
		m_pVtxBuff->Lock(0,0,(void**)&pVtx,0);

		// 頂点座標の設定
		pVtx[0].pos = D3DXVECTOR3(m_pos.x - 200.0f / 2, m_pos.y - 200.0f / 2, 0.0f);
		pVtx[1].pos = D3DXVECTOR3(m_pos.x + 200.0f / 2, m_pos.y - 200.0f / 2, 0.0f);
		pVtx[2].pos = D3DXVECTOR3(m_pos.x - 200.0f / 2, m_pos.y + 200.0f / 2, 0.0f);
		pVtx[3].pos = D3DXVECTOR3(m_pos.x + 200.0f / 2, m_pos.y + 200.0f / 2, 0.0f);
		// rhwの設定
		pVtx[0].rhw = 1.0f;
		pVtx[1].rhw = 1.0f;
		pVtx[2].rhw = 1.0f;
		pVtx[3].rhw = 1.0f;
		//頂点カラーの設定
		pVtx[0].col = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
		pVtx[1].col = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
		pVtx[2].col = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
		pVtx[3].col = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
		// テクスチャ座標指定
		pVtx[0].uv = D3DXVECTOR2( 0.0f, 0.0f );
		pVtx[1].uv = D3DXVECTOR2( 1.0f, 0.0f );
		pVtx[2].uv = D3DXVECTOR2( 0.0f, 1.0f );
		pVtx[3].uv = D3DXVECTOR2( 1.0f, 1.0f );
		
		// 頂点データをアンロックする
		m_pVtxBuff->Unlock();
	}

	return S_OK;
}
//********************************************************************************************************************
// funcinfo：初期化処理
//********************************************************************************************************************
HRESULT CScene2D::Init(int nType, D3DXVECTOR3 pos, D3DXVECTOR3 rot)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer() -> GetDevice();
	
	// ポリゴンの位置を設定
	m_pos = pos;

	// 頂点バッファの生成
	// オブジェクトの頂点バッファを作成
	if(FAILED(pDevice -> CreateVertexBuffer(sizeof(VERTEX_2D) * 4,
											D3DUSAGE_WRITEONLY,
											FVF_VERTEX_2D,
											D3DPOOL_MANAGED,
											&m_pVtxBuff,
											NULL)))
	{
		return E_FAIL;
	}

	// 頂点情報を設定
	{//頂点バッファの中身を埋める
		VERTEX_2D *pVtx;

		// 頂点データの範囲をロックし、頂点バッファへのポインタを取得
		m_pVtxBuff->Lock(0,0,(void**)&pVtx,0);

		// 頂点座標の設定
		pVtx[0].pos = D3DXVECTOR3(m_pos.x - 200.0f / 2, m_pos.y - 200.0f / 2, 0.0f);
		pVtx[1].pos = D3DXVECTOR3(m_pos.x + 200.0f / 2, m_pos.y - 200.0f / 2, 0.0f);
		pVtx[2].pos = D3DXVECTOR3(m_pos.x - 200.0f / 2, m_pos.y + 200.0f / 2, 0.0f);
		pVtx[3].pos = D3DXVECTOR3(m_pos.x + 200.0f / 2, m_pos.y + 200.0f / 2, 0.0f);
		// rhwの設定
		pVtx[0].rhw = 1.0f;
		pVtx[1].rhw = 1.0f;
		pVtx[2].rhw = 1.0f;
		pVtx[3].rhw = 1.0f;
		//頂点カラーの設定
		pVtx[0].col = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
		pVtx[1].col = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
		pVtx[2].col = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
		pVtx[3].col = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
		// テクスチャ座標指定
		pVtx[0].uv = D3DXVECTOR2( 0.0f, 0.0f );
		pVtx[1].uv = D3DXVECTOR2( 1.0f, 0.0f );
		pVtx[2].uv = D3DXVECTOR2( 0.0f, 1.0f );
		pVtx[3].uv = D3DXVECTOR2( 1.0f, 1.0f );
		
		// 頂点データをアンロックする
		m_pVtxBuff->Unlock();
	}

	return S_OK;
}
//********************************************************************************************************************
// funcinfo：終了処理
//********************************************************************************************************************
void CScene2D::Uninit(void)
{
	// 頂点バッファの破棄
	if(m_pVtxBuff != NULL)
	{	//バッファーの解放
		m_pVtxBuff -> Release();
		m_pVtxBuff = NULL;
	}

	// テクスチャの破棄
	if(m_pTexture != NULL && m_bLoadTexture == true)
	{	//バッファーの解放
		m_pTexture -> Release();
		m_pTexture = NULL;
	}

	// オブジェクトの破棄
	Release();
}
//********************************************************************************************************************
// funcinfo：更新処理
//********************************************************************************************************************
void CScene2D::Update(void)
{

}
//********************************************************************************************************************
// funcinfo：描画処理
//********************************************************************************************************************
void CScene2D::Draw(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer() -> GetDevice();
	
	// 頂点バッファをデータストリームに設定
	pDevice -> SetStreamSource( 0, m_pVtxBuff, 0, sizeof(VERTEX_2D) );

	// 頂点フォーマットの設定
	pDevice -> SetFVF( FVF_VERTEX_2D );

	// テクスチャの設定
	pDevice -> SetTexture( 0, m_pTexture );

	// ポリゴンの描画
	pDevice -> DrawPrimitive( D3DPT_TRIANGLESTRIP, 0, 2 );
}
//********************************************************************************************************************
// funcinfo：CScene2Dオブジェクトを作成
//********************************************************************************************************************
CScene2D* CScene2D::Create(int nType, D3DXVECTOR3 pos, D3DXVECTOR3 rot)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer() -> GetDevice();

	CScene2D *pScene2D;
	pScene2D = new CScene2D;
	pScene2D -> Init( nType , pos, rot );

	if(pScene2D->m_pTexture == NULL)
	{
		// テクスチャの生成
		D3DXCreateTextureFromFile(pDevice, "data/TEXTURE/player000.png ", &pScene2D->m_pTexture);
		// テクスチャをこのクラス内で読み込んだフラグをTRUEに
		pScene2D->m_bLoadTexture = true;
	}
	return pScene2D;
}
//********************************************************************************************************************
// funcinfo：テクスチャをバインド
//********************************************************************************************************************
void CScene2D::BindTexture(LPDIRECT3DTEXTURE9 pTexture)
{
	m_pTexture = pTexture;
}
//********************************************************************************************************************
// funcinfo：頂点バッファを設定
//********************************************************************************************************************
void CScene2D::SetVtxBuff(void)
{
	//頂点バッファの中身を埋める
	VERTEX_2D *pVtx;

	// 頂点データの範囲をロックし、頂点バッファへのポインタを取得
	m_pVtxBuff->Lock(0,0,(void**)&pVtx,0);

	// 頂点座標の設定
	pVtx[0].pos = D3DXVECTOR3(m_pos.x - 200.0f / 2, m_pos.y - 200.0f / 2, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(m_pos.x + 200.0f / 2, m_pos.y - 200.0f / 2, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(m_pos.x - 200.0f / 2, m_pos.y + 200.0f / 2, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(m_pos.x + 200.0f / 2, m_pos.y + 200.0f / 2, 0.0f);
	// rhwの設定
	pVtx[0].rhw = 1.0f;
	pVtx[1].rhw = 1.0f;
	pVtx[2].rhw = 1.0f;
	pVtx[3].rhw = 1.0f;
	//頂点カラーの設定
	pVtx[0].col = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
	pVtx[1].col = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
	pVtx[2].col = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
	pVtx[3].col = D3DXCOLOR( 1.0f, 1.0f, 1.0f, 1.0f );
	// テクスチャ座標指定
	pVtx[0].uv = m_uv[0];
	pVtx[1].uv = m_uv[1];
	pVtx[2].uv = m_uv[2];
	pVtx[3].uv = m_uv[3];
		
	// 頂点データをアンロックする
	m_pVtxBuff->Unlock();
}
//********************************************************************************************************************
// funcinfo：位置を取得
//********************************************************************************************************************
D3DXVECTOR3 CScene2D::GetPos(void)
{
	return m_pos;
}
//********************************************************************************************************************
// funcinfo：位置を設定
//********************************************************************************************************************
void CScene2D::SetPos(D3DXVECTOR3 pos)
{
	m_pos = pos;

	SetVtxBuff();
}
//********************************************************************************************************************
// funcinfo：UVを設定
//********************************************************************************************************************
void CScene2D::SetUV(D3DXVECTOR2* pUV)
{
	m_uv[0] = pUV[0];
	m_uv[1] = pUV[1];
	m_uv[2] = pUV[2];
	m_uv[3] = pUV[3];

	SetVtxBuff();
}