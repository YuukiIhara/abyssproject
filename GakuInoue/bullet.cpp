//********************************************************************************************************************
// タイトル:		バレット処理
// プログラム名:	bullet.cpp
//********************************************************************************************************************
//********************************************************************************************************************
// インクルードファイル
//********************************************************************************************************************
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "input.h"
#include "scene.h"
#include "bullet.h"
#include "explosion.h"

//********************************************************************************************************************
// マクロ定義
//********************************************************************************************************************

//********************************************************************************************************************
// 構造体定義
//********************************************************************************************************************

//********************************************************************************************************************
// インライン関数
//********************************************************************************************************************

//********************************************************************************************************************
// 静的メンバ変数の宣言
//********************************************************************************************************************
LPDIRECT3DTEXTURE9 CBullet::m_pTexture = NULL;

//**********************************************************************************************************************************************
// 
// CBulletクラスの実体
//
//**********************************************************************************************************************************************
//********************************************************************************************************************
// funcinfo：コンストラクタ
//********************************************************************************************************************
CBullet::CBullet()
{
	m_move = D3DXVECTOR3( 0.0f, 0.0f, 0.0f );
}
//********************************************************************************************************************
// funcinfo：デストラクタ
//********************************************************************************************************************
CBullet::~CBullet()
{

}
//********************************************************************************************************************
// funcinfo：初期化処理
//********************************************************************************************************************
HRESULT CBullet::Init(int nType, D3DXVECTOR3 pos, D3DXVECTOR3 rot)
{
	CScene2D::Init( nType, pos, rot );

	m_move = D3DXVECTOR3( 0.0f, -10.0f, 0.0f );

	SetObjType(CScene::OBJTYPE_BULLET);

	return S_OK;
}
//********************************************************************************************************************
// funcinfo：終了処理
//********************************************************************************************************************
void CBullet::Uninit(void)
{
	CScene2D::Uninit();
}
//********************************************************************************************************************
// funcinfo：更新処理
//********************************************************************************************************************
void CBullet::Update(void)
{
	D3DXVECTOR3 pos = CScene2D::GetPos();
	
	pos += m_move;

	CScene2D::SetPos(pos);

	// 敵との当たり判定
	for(int nCntScene= 0; nCntScene < MAX_SCENE; nCntScene++)
	{
		CScene* pScene;
		pScene = CScene::GetScene(nCntScene);

		if(pScene != NULL)
		{
			CScene::OBJTYPE type;
			type = pScene -> GetObjType();
			if(type == CScene::OBJTYPE_ENEMY)
			{
				D3DXVECTOR3 posEnemy;
				posEnemy = pScene -> GetPos();

				if(sqrtf(powf(posEnemy.x - pos.x, 2.0f) + powf(posEnemy.y - pos.y, 2.0f)) < 100.0f)
				{
					// 爆発の生成
					CExplosion::Create(0, pos ,D3DXVECTOR3( 0.0f, 0.0f, 0.0f ));
					// 敵の破棄
					pScene -> Uninit();
					// 弾（自分）の破棄
					this->Uninit();

					return;
				}
			}
		}
	}

	// 画面外処理
	if(pos.y < -20.0f)
	{
		this->Uninit();
	}
}
//********************************************************************************************************************
// funcinfo：描画処理
//********************************************************************************************************************
void CBullet::Draw(void)
{
	CScene2D::Draw();
}
//********************************************************************************************************************
// funcinfo：CBulletオブジェクトを作成
//********************************************************************************************************************
CBullet* CBullet::Create(int nType, D3DXVECTOR3 pos, D3DXVECTOR3 rot)
{
	CBullet *pBullet;
	pBullet = new CBullet;
	pBullet -> Init( nType, pos, rot );

	// テクスチャの割り当て
	pBullet -> BindTexture(m_pTexture);

	return pBullet;
}
//********************************************************************************************************************
// funcinfo：テクスチャをロード
//********************************************************************************************************************
HRESULT CBullet::Load(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer() -> GetDevice();

	if(m_pTexture == NULL)
	{
		// テクスチャの生成
		D3DXCreateTextureFromFile(pDevice, "data/TEXTURE/bullet000.png ", &m_pTexture);
	}

	return S_OK;
}
//********************************************************************************************************************
// funcinfo：テクスチャの破棄
//********************************************************************************************************************
void CBullet::Unload(void)
{
	// テクスチャの破棄
	if(m_pTexture != NULL)
	{	//バッファーの解放
		m_pTexture -> Release();
		m_pTexture = NULL;
	}
}