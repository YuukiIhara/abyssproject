//********************************************************************************************************************
// タイトル:		爆発処理
// プログラム名:	explosion.cpp
//********************************************************************************************************************
//********************************************************************************************************************
// インクルードファイル
//********************************************************************************************************************
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "input.h"
#include "scene.h"
#include "explosion.h"

//********************************************************************************************************************
// マクロ定義
//********************************************************************************************************************

//********************************************************************************************************************
// 構造体定義
//********************************************************************************************************************

//********************************************************************************************************************
// インライン関数
//********************************************************************************************************************

//********************************************************************************************************************
// 静的メンバ変数の宣言
//********************************************************************************************************************
LPDIRECT3DTEXTURE9 CExplosion::m_pTexture = NULL;

//**********************************************************************************************************************************************
// 
// CExplosionクラスの実体
//
//**********************************************************************************************************************************************
//********************************************************************************************************************
// funcinfo：コンストラクタ
//********************************************************************************************************************
CExplosion::CExplosion()
{
	m_nCntAnim = 0;
	m_nPatAnim = 0;
	m_nDivideX = 0;
	m_nDivideY = 0;
	m_nPatChangeFrame = 0;
}
//********************************************************************************************************************
// funcinfo：デストラクタ
//********************************************************************************************************************
CExplosion::~CExplosion()
{

}
//********************************************************************************************************************
// funcinfo：初期化処理
//********************************************************************************************************************
HRESULT CExplosion::Init(int nType, D3DXVECTOR3 pos, D3DXVECTOR3 rot)
{
	CScene2D::Init( nType, pos, rot );

	m_nCntAnim = 0;
	m_nPatAnim = 0;
	m_nDivideX = 8;
	m_nDivideY = 1;
	m_nPatChangeFrame = 5;

	// 初期テクスチャUV座標を設定
	float fPosXLeft, fPosXRight;
	float fPosYUp, fPosYDown;
	D3DXVECTOR2 pUV[4];

	fPosXLeft	= (1.0f / m_nDivideX) * (m_nPatAnim % m_nDivideX);
	fPosXRight	= fPosXLeft + (1.0f / m_nDivideX);
	fPosYUp		= (1.0f / m_nDivideY) * (m_nPatAnim / m_nDivideX);
	fPosYDown	= fPosYUp + (1.0f / m_nDivideY);

	pUV[0] = D3DXVECTOR2( fPosXLeft, fPosYUp );
	pUV[1] = D3DXVECTOR2( fPosXRight, fPosYUp );
	pUV[2] = D3DXVECTOR2( fPosXLeft, fPosYDown );
	pUV[3] = D3DXVECTOR2( fPosXRight, fPosYDown );

	CScene2D::SetUV(&pUV[0]);

	SetObjType(CScene::OBJTYPE_EXPLOSION);

	return S_OK;
}
//********************************************************************************************************************
// funcinfo：終了処理
//********************************************************************************************************************
void CExplosion::Uninit(void)
{
	CScene2D::Uninit();
}
//********************************************************************************************************************
// funcinfo：更新処理
//********************************************************************************************************************
void CExplosion::Update(void)
{
	float fPosXLeft, fPosXRight;
	float fPosYUp, fPosYDown;
	D3DXVECTOR2 pUV[4];


	m_nCntAnim++;
	if(m_nCntAnim % m_nPatChangeFrame == 0)
	{
		m_nCntAnim = 0;
		m_nPatAnim = (m_nPatAnim + 1) % (m_nDivideX * m_nDivideY);

		fPosXLeft	= (1.0f / m_nDivideX) * (m_nPatAnim % m_nDivideX);
		fPosXRight	= fPosXLeft + (1.0f / m_nDivideX);
		fPosYUp		= (1.0f / m_nDivideY) * (m_nPatAnim / m_nDivideX);
		fPosYDown	= fPosYUp + (1.0f / m_nDivideY);

		pUV[0] = D3DXVECTOR2( fPosXLeft, fPosYUp );
		pUV[1] = D3DXVECTOR2( fPosXRight, fPosYUp );
		pUV[2] = D3DXVECTOR2( fPosXLeft, fPosYDown );
		pUV[3] = D3DXVECTOR2( fPosXRight, fPosYDown );

		CScene2D::SetUV(&pUV[0]);

		if(m_nPatAnim == 0)
		{
			this->Uninit();
		}
	}
}
//********************************************************************************************************************
// funcinfo：描画処理
//********************************************************************************************************************
void CExplosion::Draw(void)
{
	CScene2D::Draw();
}
//********************************************************************************************************************
// funcinfo：CExplosionオブジェクトを作成
//********************************************************************************************************************
CExplosion* CExplosion::Create(int nType, D3DXVECTOR3 pos, D3DXVECTOR3 rot)
{
	CExplosion *pExplosion;
	pExplosion = new CExplosion;
	pExplosion -> Init( nType, pos, rot );

	// テクスチャの割り当て
	pExplosion -> BindTexture(m_pTexture);

	return pExplosion;
}
//********************************************************************************************************************
// funcinfo：テクスチャをロード
//********************************************************************************************************************
HRESULT CExplosion::Load(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice;
	pDevice = CManager::GetRenderer() -> GetDevice();

	if(m_pTexture == NULL)
	{
		// テクスチャの生成
		D3DXCreateTextureFromFile(pDevice, "data/TEXTURE/explosion000.png ", &m_pTexture);
	}

	return S_OK;
}
//********************************************************************************************************************
// funcinfo：テクスチャの破棄
//********************************************************************************************************************
void CExplosion::Unload(void)
{
	// テクスチャの破棄
	if(m_pTexture != NULL)
	{	//バッファーの解放
		m_pTexture -> Release();
		m_pTexture = NULL;
	}
}